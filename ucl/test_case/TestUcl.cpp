#include <gtest/gtest.h>
#include <algorithm>
#include <cstring>
#include <cctype>
#include <fstream>
#include "lex.h"
#include "input.h"
#include "alloc.h"
#include "str.h"
#include "input.h"
#include "vector.h"
#include "type.h"
#include "symbol.h"
#include "target.h"
#include "reg.h"
#include "ast.h"
#include "decl.h"

Heap CurrentHeap;
HEAP(StringHeap);
HEAP(ProgramHeap);
HEAP(FileHeap);
FILE *ASMFile;
char *ExtName = ".s";
char *ASMFileName = NULL;
int ErrorCount;
namespace {

    void Initialize(void)
    {
        CurrentHeap = &FileHeap;
        ErrorCount = 0;
        InitSymbolTable();
        ASMFile = NULL;
    }
    void Finalize(void)
    {
        FreeHeap(&FileHeap);
    }
    unsigned char code[] = "static char int void struct "
        "return id_a 123 , = |= ^= &= <<= >>= += -= *= /= %= ( ) \"test\" { } ;";
    const int tokens[] = {TK_STATIC, TK_CHAR, TK_INT, TK_VOID, TK_STRUCT, 
        TK_RETURN, TK_ID, TK_INTCONST, TK_COMMA, TK_ASSIGN, 
        TK_BITOR_ASSIGN, TK_BITXOR_ASSIGN, TK_BITAND_ASSIGN, TK_LSHIFT_ASSIGN, TK_RSHIFT_ASSIGN, 
        TK_ADD_ASSIGN, TK_SUB_ASSIGN, TK_MUL_ASSIGN, TK_DIV_ASSIGN, TK_MOD_ASSIGN, 
        TK_LPAREN, TK_RPAREN, TK_STRING, TK_LBRACE, TK_RBRACE, 
        TK_SEMICOLON, TK_END};

    std::string get_string(std::string res)
    {
    　　int r = res.find('\r\n');
    　　while (r != std::string::npos)
    　　{
    　　　　if (r != std::string::npos)
    　　　　{
    　　　　　　res.replace(r, 1, "");
    　　　　　　r = res.find('\r\n');
    　　　　}
    　　}
    　　res.erase(std::remove_if(res.begin(), res.end(), ::isspace), res.end());
    　　return res;
    }
}
class TestUcl : public::testing::Test 
{
    virtual void SetUp()
    {
        CurrentHeap = &ProgramHeap;
    	SetupRegisters();
        SetupLexer();
        SetupTypeSystem();
    }
    virtual void TearDown()
    {
        ;
    }
};
TEST_F(TestUcl, Test_All_Token)
{
    Input.base = const_cast<unsigned char*>(code);
    Input.size = sizeof(code) / sizeof(code[0]);
    int sz = Input.size;
	Input.base[sz - 1] = END_OF_FILE;
	Input.cursor = Input.base;
    int tok = GetNextToken();
    int i = 0;
    while (tok != TK_END) {
        EXPECT_EQ(tok, tokens[i]);
        i++;
        tok = GetNextToken();
    }
}

TEST_F(TestUcl, Test_Global_Declaration_Int)
{
    char *input = "./ucl/test_case/test_file/global_declaration_int.c";
    char output[] = "./ucl/test_case/test_file/global_declaration_int.s";
    ASMFileName = output;

    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                        ".data"
                        ".comm	a,4"
                        ".text\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    asmFile.close();
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
}
TEST_F(TestUcl, Test_Type)
{
    char *input = "./ucl/test_case/test_file/test_type.c";
    char *output = "./ucl/test_case/test_file/test_type.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                        ".data"
                        ".comm	ch,1"
                        ".text\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Comma_Expression)
{
    char *input = "./ucl/test_case/test_file/test_comma_expression.c";
    char *output = "./ucl/test_case/test_file/test_comma_expression.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                        ".data"
                        ".comm	a,4"
                        ".comm	b,4"
                        ".text\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Static)
{
    char *input = "./ucl/test_case/test_file/test_static.c";
    char *output = "./ucl/test_case/test_file/test_static.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                        ".data"
                        ".lcomm	a,4"
                        ".text"
                        "add:"
                            "pushl %ebp"
                            "pushl %ebx"
                            "pushl %esi"
                            "pushl %edi"
                            "movl %esp, %ebp"
                            "subl $4, %esp"
                        ".BB0:"
                            "movl 20(%ebp), %eax"
                            "addl 24(%ebp), %eax"
                            "jmp .BB2"
                        ".BB1:"
                        ".BB2:"
                            "movl %ebp, %esp"
                            "popl %edi"
                            "popl %esi"
                            "popl %ebx"
                            "popl %ebp"
                            "ret"
                        ".globl main"
                        "main:"
                            "pushl %ebp"
                            "pushl %ebx"
                            "pushl %esi"
                            "pushl %edi"
                            "movl %esp, %ebp"
                            "subl $4, %esp"
                        ".BB3:"
                            "pushl $4"
                            "pushl $3"
                            "call add"
                            "addl $8, %esp"
                        ".BB4:"
                            "movl %ebp, %esp"
                            "popl %edi"
                            "popl %esi"
                            "popl %ebx"
                            "popl %ebp"
                            "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}
TEST_F(TestUcl, Test_Function_Definition)
{
    char *input = "./ucl/test_case/test_file/test_function_definition.c";
    char *output = "./ucl/test_case/test_file/test_function_definition.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                            ".BB0:"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Function_Definition_With_Parameter)
{
    char *input = "./ucl/test_case/test_file/test_function_definition_with_parameter.c";
    char *output = "./ucl/test_case/test_file/test_function_definition_with_parameter.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                            ".BB0:"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Return)
{
    char *input = "./ucl/test_case/test_file/test_return.c";
    char *output = "./ucl/test_case/test_file/test_return.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                            ".BB0:"
                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Function_Call)
{
    char *input = "./ucl/test_case/test_file/test_function_call.c";
    char *output = "./ucl/test_case/test_file/test_function_call.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	print_hw"
                            "print_hw:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                            ".BB0:"
                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB3:"
                                "pushl $97"
                                "pushl $3"
                                "call print_hw"
                                "addl $8, %esp"
                                "movl $1, %eax"
                                "jmp .BB5"
                            ".BB4:"
                            ".BB5:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Local_Declaration)
{
    char *input = "./ucl/test_case/test_file/local_declaration.c";
    char *output = "./ucl/test_case/test_file/local_declaration.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Struct)
{
    char *input = "./ucl/test_case/test_file/test_struct.c";
    char *output = "./ucl/test_case/test_file/test_struct.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm t,8"
                            ".text\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Assign)
{
    char *input = "./ucl/test_case/test_file/test_assign.c";
    char *output = "./ucl/test_case/test_file/test_assign.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".str0: .string \"int * f(void) \\012\""
                            ".lcomm number.0, 4"
                            ".text"
                            ".globl f"
                            "f:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB0:"
                                "leal .str0, %eax"
                                "pushl %eax"
                                "call printf"
                                "addl $4, %esp"
                                "leal number.0, %ecx"
                                "movl %ecx, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $40, %esp"
                            ".BB3:"
                                "movl $1, -4(%ebp)"
                                "call f"
                                "movl (%eax), %ecx"
                                "addl $3, %ecx"
                                "movl %ecx, (%eax)"
                                "call f"
                                "movl (%eax), %ecx"
                                "movl %eax, -20(%ebp)"
                                "movl %ecx, -24(%ebp)"
                                "call f"
                                "movl (%eax), %ecx"
                                "addl $3, %ecx"
                                "movl -24(%ebp), %edx"
                                "addl %ecx, %edx"
                                "movl -20(%ebp), %ebx"
                                "movl %edx, (%ebx)"
                                "movl $0, %eax"
                                "jmp .BB5"
                            ".BB4:"
                            ".BB5:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_BitOr_Assign)
{
    char *input = "./ucl/test_case/test_file/test_bitor_assign.c";
    char *output = "./ucl/test_case/test_file/test_bitor_assign.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $8, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "orl $1, %eax"
                                "movl %eax, -4(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Sub_Assign)
{
    char *input = "./ucl/test_case/test_file/test_sub_assign.c";
    char *output = "./ucl/test_case/test_file/test_sub_assign.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $8, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "addl $-3, %eax"
                                "movl %eax, -4(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Div_Assign)
{
    char *input = "./ucl/test_case/test_file/test_div_assign.c";
    char *output = "./ucl/test_case/test_file/test_div_assign.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $8, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "movl $3, %ecx"
                                "cdq"
                                "idivl %ecx"
                                "movl %eax, -4(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Binary)
{
    char *input = "./ucl/test_case/test_file/test_binary.c";
    char *output = "./ucl/test_case/test_file/test_binary.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $32, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "orl $3, %eax"
                                "movl -4(%ebp), %ecx"
                                "shll $3, %ecx"
                                "movl -4(%ebp), %edx"
                                "addl $3, %edx"
                                "movl -4(%ebp), %ebx"
                                "addl $-3, %ebx"
                                "movl -4(%ebp), %esi"
                                "imull $3, %esi"
                                "movl -4(%ebp), %eax"
                                "movl $3, %edi"
                                "cdq"
                                "idivl %edi"
                                "movl -4(%ebp), %eax"
                                "movl $3, %edi"
                                "cdq"
                                "idivl %edi"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Binary_Multiplicative)
{
    char *input = "./ucl/test_case/test_file/test_binary_multiplicative.c";
    char *output = "./ucl/test_case/test_file/test_binary_multiplicative.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $16, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "imull $3, %eax"
                                "movl -4(%ebp), %eax"
                                "movl $3, %ecx"
                                "cdq"
                                "idivl %ecx"
                                "movl -4(%ebp), %eax"
                                "movl $3, %ecx"
                                "cdq"
                                "idivl %ecx"
                                "movl $9, -4(%ebp)"
                                "movl $0, -4(%ebp)"
                                "movl $3, -4(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Binary_Shift)
{
    char *input = "./ucl/test_case/test_file/test_binary_shift.c";
    char *output = "./ucl/test_case/test_file/test_binary_shift.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "sarl $3, %eax"
                                "movl -4(%ebp), %ecx"
                                "shll $3, %ecx"
                                "movl $1, -4(%ebp)"
                                "movl $8, -4(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Binary_Add_Sub)
{
    char *input = "./ucl/test_case/test_file/test_binary_add_sub.c";
    char *output = "./ucl/test_case/test_file/test_binary_add_sub.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm arr, 40"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $44, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "addl $3, %eax"
                                "movl -4(%ebp), %ecx"
                                "addl $-3, %ecx"
                                "movl $7, -4(%ebp)"
                                "movl $-1, -4(%ebp)"
                                "leal arr, %edx"
                                "addl $36, %edx"
                                "leal arr, %ebx"
                                "addl $4, %ebx"
                                "subl %ebx, %edx"
                                "movl %edx, %eax"
                                "movl $4, %esi"
                                "cdq"
                                "idivl %esi"
                                "movl %eax, -4(%ebp)"
                                "leal arr, %edx"
                                "addl $4, %edx"
                                "movl %edx, -4(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Binary_Bitwise)
{
    char *input = "./ucl/test_case/test_file/test_binary_bitwise.c";
    char *output = "./ucl/test_case/test_file/test_binary_bitwise.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $16, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "orl $3, %eax"
                                "movl -4(%ebp), %ecx"
                                "andl $3, %ecx"
                                "movl -4(%ebp), %edx"
                                "xorl $3, %edx"
                                "movl $3, -4(%ebp)"
                                "movl $0, -4(%ebp)"
                                "movl $3, -4(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Binary_Logical)
{
    char *input = "./ucl/test_case/test_file/test_binary_logical.c";
    char *output = "./ucl/test_case/test_file/test_binary_logical.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB0:"
                                "cmpl $0, -4(%ebp)"
                                "jne .BB3"
                            ".BB1:"
                                "jmp .BB3"
                            ".BB2:"
                                "movl $0, -8(%ebp)"
                                "jmp .BB4"
                            ".BB3:"
                                "movl $1, -8(%ebp)"
                            ".BB4:"
                                "cmpl $0, -4(%ebp)"
                                "je .BB6"
                            ".BB5:"
                                "jmp .BB7"
                            ".BB6:"
                                "movl $0, -12(%ebp)"
                                "jmp .BB8"
                            ".BB7:"
                                "movl $1, -12(%ebp)"
                            ".BB8:"
                                "movl $1, -4(%ebp)"
                                "movl $1, -4(%ebp)"
                            ".BB9:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Binary_Equality)
{
    char *input = "./ucl/test_case/test_file/test_binary_equality.c";
    char *output = "./ucl/test_case/test_file/test_binary_equality.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm c, 4"
                            ".comm s, 4"
                            ".comm i, 4"
                            ".comm v, 4"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $16, %esp"
                            ".BB0:"
                                "cmpl $3, -4(%ebp)"
                                "je .BB2"
                            ".BB1:"
                                "movl $0, -8(%ebp)"
                                "jmp .BB3"
                            ".BB2:"
                                "movl $1, -8(%ebp)"
                            ".BB3:"
                                "cmpl $3, -4(%ebp)"
                                "jne .BB5"
                            ".BB4:"
                                "movl $0, -12(%ebp)"
                                "jmp .BB6"
                            ".BB5:"
                                "movl $1, -12(%ebp)"
                            ".BB6:"
                                "movl c, %eax"
                                "cmpl v, %eax"
                                "je .BB8"
                            ".BB7:"
                                "movl $0, -16(%ebp)"
                                "jmp .BB9"
                            ".BB8:"
                                "movl $1, -16(%ebp)"
                            ".BB9:"
                            ".BB10:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Binary_Relational)
{
    char *input = "./ucl/test_case/test_file/test_binary_relational.c";
    char *output = "./ucl/test_case/test_file/test_binary_relational.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $20, %esp"
                            ".BB0:"
                                "cmpl $3, -4(%ebp)"
                                "jg .BB2"
                            ".BB1:"
                                "movl $0, -8(%ebp)"
                                "jmp .BB3"
                            ".BB2:"
                                "movl $1, -8(%ebp)"
                            ".BB3:"
                                "cmpl $3, -4(%ebp)"
                                "jl .BB5"
                            ".BB4:"
                                "movl $0, -12(%ebp)"
                                "jmp .BB6"
                            ".BB5:"
                                "movl $1, -12(%ebp)"
                            ".BB6:"
                                "cmpl $3, -4(%ebp)"
                                "jge .BB8"
                            ".BB7:"
                                "movl $0, -16(%ebp)"
                                "jmp .BB9"
                            ".BB8:"
                                "movl $1, -16(%ebp)"
                            ".BB9:"
                                "cmpl $3, -4(%ebp)"
                                "jle .BB11"
                            ".BB10:"
                                "movl $0, -20(%ebp)"
                                "jmp .BB12"
                            ".BB11:"
                                "movl $1, -20(%ebp)"
                            ".BB12:"
                            ".BB13:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Conditional)
{
    char *input = "./ucl/test_case/test_file/test_conditional.c";
    char *output = "./ucl/test_case/test_file/test_conditional.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm b, 4"
                            ".comm c, 4"
                            ".comm data, 8"
                            ".comm d1, 8"
                            ".comm d2, 8"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $16, %esp"
                            ".BB0:"
                                "cmpl $0, -4(%ebp)"
                                "je .BB2"
                            ".BB1:"
                                "movl $3, -8(%ebp)"
                                "jmp .BB3"
                            ".BB2:"
                                "movl $2, -8(%ebp)"
                            ".BB3:"
                                "movl b, %eax"
                                "movl %eax, -4(%ebp)"
                                "cmpl $0, -4(%ebp)"
                                "je .BB5"
                            ".BB4:"
                                "leal -16(%ebp), %edi"
                                "leal d1, %esi"
                                "movl $8, %ecx"
                                "rep movsb"
                                "jmp .BB6"
                            ".BB5:"
                                "leal -16(%ebp), %edi"
                                "leal d2, %esi"
                                "movl $8, %ecx"
                                "rep movsb"
                            ".BB6:"
                                "leal data, %edi"
                                "leal -16(%ebp), %esi"
                                "movl $8, %ecx"
                                "rep movsb"
                            ".BB7:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Unary_Inc)
{
    char *input = "./ucl/test_case/test_file/test_unary_inc.c";
    char *output = "./ucl/test_case/test_file/test_unary_inc.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $28, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "addl $1, %eax"
                                "movl %eax, -4(%ebp)"
                                "movl -4(%ebp), %ecx"
                                "addl $-1, %ecx"
                                "movl %ecx, -4(%ebp)"
                                "movl -4(%ebp), %edx"
                                "movl -4(%ebp), %ebx"
                                "addl $1, %ebx"
                                "movl %ebx, -4(%ebp)"
                                "movl -4(%ebp), %esi"
                                "movl -4(%ebp), %edi"
                                "addl $-1, %edi"
                                "movl %edi, -4(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Unary_Not)
{
    char *input = "./ucl/test_case/test_file/test_unary_not.c";
    char *output = "./ucl/test_case/test_file/test_unary_not.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $8, %esp"
                            ".BB0:"
                                "cmpl $0, -4(%ebp)"
                                "je .BB2"
                            ".BB1:"
                                "movl $0, -8(%ebp)"
                                "jmp .BB3"
                            ".BB2:"
                                "movl $1, -8(%ebp)"
                            ".BB3:"
                            ".BB4:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Unary_Comp)
{
    char *input = "./ucl/test_case/test_file/test_unary_comp.c";
    char *output = "./ucl/test_case/test_file/test_unary_comp.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $8, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "notl %eax"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Unary_Neg)
{
    char *input = "./ucl/test_case/test_file/test_unary_neg.c";
    char *output = "./ucl/test_case/test_file/test_unary_neg.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $8, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "negl %eax"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Unary_Sizeof)
{
    char *input = "./ucl/test_case/test_file/test_unary_sizeof.c";
    char *output = "./ucl/test_case/test_file/test_unary_sizeof.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm arr, 16"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                                "movl $4, -4(%ebp)"
                                "movl $4, -4(%ebp)"
                                "movl $4, -4(%ebp)"
                                "movl $4, -4(%ebp)"
                                "movl $16, -4(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Unary_Address)
{
    char *input = "./ucl/test_case/test_file/test_unary_address.c";
    char *output = "./ucl/test_case/test_file/test_unary_address.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm ptr, 4"
                            ".text"
                            ".globl	f"
                            "f:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                            ".BB0:"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB2:"
                                "leal -4(%ebp), %eax"
                                "movl ptr, %ecx"
                                "movl %ecx, -4(%ebp)"
                                "leal f, %ecx"
                                "movl %ecx, -4(%ebp)"
                            ".BB3:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Unary_Deref)
{
    char *input = "./ucl/test_case/test_file/test_unary_deref.c";
    char *output = "./ucl/test_case/test_file/test_unary_deref.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm ptr1, 4"
                            ".globl ptr2"
                            "ptr2: .long ptr1"
                            ".comm arr, 16"
                            ".text"
                            ".globl f"
                            "f:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                            ".BB0:"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB2:"
                                "movl -4(%ebp), %eax"
                                "movl %eax, ptr1"
                                "movl $1, arr+12"
                                "movl $2, arr+0"
                                "call f"
                            ".BB3:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Unary_Cast)
{
    char *input = "./ucl/test_case/test_file/test_unary_cast.c";
    char *output = "./ucl/test_case/test_file/test_unary_cast.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "movb %al, -8(%ebp)"
                                "pushl $16"
                                "call malloc"
                                "addl $4, %esp"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Postfix_Dot)
{
    char *input = "./ucl/test_case/test_file/test_Postfix_dot.c";
    char *output = "./ucl/test_case/test_file/test_Postfix_dot.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                                "movl $1, -4(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Postfix_Pointer)
{
    char *input = "./ucl/test_case/test_file/test_postfix_pointer.c";
    char *output = "./ucl/test_case/test_file/test_postfix_pointer.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $8, %esp"
                            ".BB0:"
                                "movl -4(%ebp), %eax"
                                "movl (%eax), %ecx"
                                "movl $10, (%ecx)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Postfix_Bracket)
{
    char *input = "./ucl/test_case/test_file/test_postfix_bracket.c";
    char *output = "./ucl/test_case/test_file/test_postfix_bracket.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm arr, 48"
                            ".globl ptr"
                            "ptr: .long arr"
                            ".globl ptr3"
                            "ptr3: .long arr+24"
                            ".globl ptr1"
                            "ptr1: .long arr"
                            ".globl ptr2"
                            "ptr2: .long ptr1"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $56, %esp"
                            ".BB0:"
                                "movl $5, -24(%ebp)"
                                "movl ptr, %eax"
                                "addl $24, %eax"
                                "movl $1, (%eax)"
                                "movl $2, arr+24"
                                "movl $3, arr+0"
                                "movl ptr2, %ecx"
                                "movl (%ecx), %edx"
                                "movl $5, (%edx)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Const)
{
    char *input = "./ucl/test_case/test_file/test_const.c";
    char *output = "./ucl/test_case/test_file/test_const.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm a,4"
                            ".globl i"
                            "i: .long 5"
                            ".globl j"
                            "j: .long 6"
                            ".globl p1"
                            "p1: .long i"
                            ".globl p2"
                            "p2: .long j"
                            ".text"
                            ".globl add"
                            "add:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                                "movl 20(%ebp), %eax"
                                "addl 24(%ebp), %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $28, %esp"
                            ".BB3:"
                                "leal i, %eax"
                                "movl %eax, -4(%ebp)"
                                "leal j, %ecx"
                                "movl %ecx, -8(%ebp)"
                                "leal j, %edx"
                                "movl %edx, p1"
                                "movl p2, %ebx"
                                "movl $10, (%ebx)"
                                "leal j, %ebx"
                                "movl %ebx, -4(%ebp)"
                                "movl -8(%ebp), %esi"
                                "movl $11, (%esi)"
                                "pushl $4"
                                "pushl $3"
                                "call add"
                                "addl $8, %esp"
                                "movl %eax, i"
                            ".BB4:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";

    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_If)
{
    char *input = "./ucl/test_case/test_file/test_if.c";
    char *output = "./ucl/test_case/test_file/test_if.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                                "cmpl $1, -4(%ebp)"
                                "jne .BB2"
                            ".BB1:"
                                "movl $2, -4(%ebp)"
                                "jmp .BB3"
                            ".BB2:"
                                "movl $3, -4(%ebp)"
                            ".BB3:"
                            ".BB4:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_While)
{
    char *input = "./ucl/test_case/test_file/test_while.c";
    char *output = "./ucl/test_case/test_file/test_while.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                                "jmp .BB2"
                            ".BB1:"
                                "movl $1, -4(%ebp)"
                            ".BB2:"
                                "cmpl $0, -4(%ebp)"
                                "jne .BB1"
                            ".BB3:"
                            ".BB4:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Do_While)
{
    char *input = "./ucl/test_case/test_file/test_do_while.c";
    char *output = "./ucl/test_case/test_file/test_do_while.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                            ".BB1:"
                                "movl $1, -4(%ebp)"
                            ".BB2:"
                                "cmpl $0, -4(%ebp)"
                                "jne .BB1"
                            ".BB3:"
                            ".BB4:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_For)
{
    char *input = "./ucl/test_case/test_file/test_for.c";
    char *output = "./ucl/test_case/test_file/test_for.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $8, %esp"
                            ".BB0:"
                                "movl $0, -4(%ebp)"
                                "jmp .BB3"
                            ".BB1:"
                                "movl $1, -4(%ebp)"
                            ".BB2:"
                                "movl -4(%ebp), %eax"
                                "addl $1, %eax"
                                "movl %eax, -4(%ebp)"
                            ".BB3:"
                                "cmpl $5, -4(%ebp)"
                                "jl .BB1"
                            ".BB4:"
                            ".BB5:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Break)
{
    char *input = "./ucl/test_case/test_file/test_break.c";
    char *output = "./ucl/test_case/test_file/test_break.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $8, %esp"
                            ".BB0:"
                                "movl $0, -4(%ebp)"
                                "jmp .BB4"
                            ".BB1:"
                                "jmp .BB5"
                            ".BB2:"
                            ".BB3:"
                                "movl -4(%ebp), %eax"
                                "addl $1, %eax"
                                "movl %eax, -4(%ebp)"
                            ".BB4:"
                                "cmpl $5, -4(%ebp)"
                                "jl .BB1"
                            ".BB5:"
                            ".BB6:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Continue)
{
    char *input = "./ucl/test_case/test_file/test_continue.c";
    char *output = "./ucl/test_case/test_file/test_continue.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $8, %esp"
                            ".BB0:"
                                "movl $0, -4(%ebp)"
                                "jmp .BB4"
                            ".BB1:"
                                "jmp .BB3"
                            ".BB2:"
                            ".BB3:"
                                "movl -4(%ebp), %eax"
                                "addl $1, %eax"
                                "movl %eax, -4(%ebp)"
                            ".BB4:"
                                "cmpl $5, -4(%ebp)"
                                "jl .BB1"
                            ".BB5:"
                            ".BB6:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Switch)
{
    char *input = "./ucl/test_case/test_file/test_switch.c";
    char *output = "./ucl/test_case/test_file/test_switch.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB0:"
                                "cmpl $50, -4(%ebp)"
                                "jl .BB4"
                            ".BB1:"
                                "cmpl $50, -4(%ebp)"
                                "jg .BB8"
                            ".BB2:"
                                "jmp .BB17"
                            ".BB3:"
                            ".BB4:"
                                "cmpl $1, -4(%ebp)"
                                "jl .BB19"
                            ".BB5:"
                                "cmpl $2, -4(%ebp)"
                                "jg .BB19"
                            ".BB6:"
                                "movl -4(%ebp), %eax"
                                "subl $1, %eax"
                            ".data"
                            "swtchTable1: .long .BB11"
                                        ".long .BB13"
                            ".text"
                                "jmp *swtchTable1(,%eax,4)"
                            ".BB7:"
                            ".BB8:"
                                "cmpl $20000, -4(%ebp)"
                                "jne .BB19"
                            ".BB9:"
                                "jmp .BB15"
                            ".BB10:"
                            ".BB11:"
                                "movl $10, -4(%ebp)"
                                "jmp .BB19"
                            ".BB12:"
                            ".BB13:"
                                "movl $20, -4(%ebp)"
                                "jmp .BB19"
                            ".BB14:"
                            ".BB15:"
                                "movl $20000, -4(%ebp)"
                                "jmp .BB19"
                            ".BB16:"
                            ".BB17:"
                                "movl $50, -4(%ebp)"
                                "jmp .BB19"
                            ".BB18:"
                            ".BB19:"
                                "movl $6, -4(%ebp)"
                            ".BB20:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Typedef)
{
    char *input = "./ucl/test_case/test_file/test_typedef.c";
    char *output = "./ucl/test_case/test_file/test_typedef.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm a, 4"
                            ".comm arr, 48"
                            ".globl ptr"
                            "ptr: .long arr + 32"
                            ".comm c, 4"
                            ".text"
                            ".globl g"
                            "g:"
                            "   pushl %ebp"
                            "   pushl %ebx"
                            "   pushl %esi"
                            "   pushl %edi"
                            "   movl %esp, %ebp"
                            ".BB0:"
                            ".BB1:"
                            "   movl %ebp, %esp"
                            "   popl %edi"
                            "   popl %esi"
                            "   popl %ebx"
                            "   popl %ebp"
                            "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Unsigned)
{
    char *input = "./ucl/test_case/test_file/test_unsigned.c";
    char *output = "./ucl/test_case/test_file/test_unsigned.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm sa, 4"
                            ".comm sia, 4"
                            ".comm uia, 4"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                            ".BB0:"
                                "movl $1, sa"
                                "movl $1, sia"
                                "movl $1, uia"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                            "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Extern)
{
    char *input = "./ucl/test_case/test_file/test_extern.c";
    char *output = "./ucl/test_case/test_file/test_extern.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                                "movl $1, a"
                                "pushl $16"
                                "call malloc"
                                "addl $4, %esp"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                            "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Init)
{
    char *input = "./ucl/test_case/test_file/test_init.c";
    char *output = "./ucl/test_case/test_file/test_init.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".globl a"
                            "a: .long 1"
                            ".globl p"
                            "p: .long a"
                            ".globl arr1"
                            "arr1:  .long 1"
                            "       .long 2"
                            "       .long 3"
                            ".globl arr2"
                            "arr2:  .long 4"
                            "       .long 5"
                            ".globl arr3"
                            "arr3:  .long 6"
                            "       .long 7"
                            "       .long 8"
                            "       .long 9"
                            ".globl arr4"
                            "arr4:  .long 10"
                            "       .long 11"
                            "       .long 12"
                            "       .long 13"
                            ".globl dt"
                            "dt:    .long 20"
                            "       .long 30"
                            "       .space 4"
                            ".globl ptr2"
                            "ptr2:  .long arr4+16"
                            ".text"
                            ".globl main"
                            "main:"
                            "   pushl %ebp"
                            "   pushl %ebx"
                            "   pushl %esi"
                            "   pushl %edi"
                            "   movl %esp, %ebp"
                            "   subl $68, %esp"
                            ".BB0:"
                            "   movl $1, -12(%ebp)"
                            "   movl $2, -8(%ebp)"
                            "   movl $3, -4(%ebp)"
                            "   movl $4, -20(%ebp)"
                            "   movl $5, -16(%ebp)"
                            "   movl $6, -36(%ebp)"
                            "   movl $7, -32(%ebp)"
                            "   movl $8, -28(%ebp)"
                            "   movl $9, -24(%ebp)"
                            "   movl $10, -52(%ebp)"
                            "   movl $11, -48(%ebp)"
                            "   movl $12, -44(%ebp)"
                            "   movl $13, -40(%ebp)"
                            "   movl $20, -60(%ebp)"
                            "   movl $30, -56(%ebp)"
                            "   leal arr4+16, %eax"
                            "   movl %eax, -64(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                            "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Auto)
{
    char *input = "./ucl/test_case/test_file/test_auto.c";
    char *output = "./ucl/test_case/test_file/test_auto.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                                "movl $1, -4(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                            "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig1_24)
{
    char *input = "./ucl/test_case/test_file/test_fig1_24.c";
    char *output = "./ucl/test_case/test_file/test_fig1_24.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".str0: .string \"Hello World\""
                            ".comm str1, 4"
                            ".lcomm str2.0, 4"
                            ".text"
                            ".globl h"
                            "h:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $8, %esp"
                            ".BB0:"
                                "movl 20(%ebp), %eax"
                                "movl %eax, str2.0"
                                "pushl $16"
                                "call malloc"
                                "addl $4, %esp"
                                "movl %eax, -4(%ebp)"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB2:"
                                "leal .str0, %eax"
                                "movl %eax, str1"
                                "pushl str1"
                                "call h"
                                "addl $4, %esp"
                            ".BB3:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Fig1_28)
{
    char *input = "./ucl/test_case/test_file/test_fig1_28.c";
    char *output = "./ucl/test_case/test_file/test_fig1_28.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".globl a"
                            "a: .long 10"
                            ".globl b"
                            "b: .long 20"
                            ".comm c, 4"
                            ".lcomm d.0, 4"
                            "e.1: .long 5"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $60, %esp"
                            ".BB0:"
                                "movl a, %eax"
                                "orl b, %eax"
                                "movl %eax, c"

                                "movl a, %ecx"
                                "andl b, %ecx"
                                "movl %ecx, c"

                                "movl a, %edx"
                                "shll $2, %edx"
                                "movl %edx, c"

                                "movl a, %ebx"
                                "sarl $2, %ebx"
                                "movl %ebx, c"

                                "movl a, %esi"
                                "addl b, %esi"
                                "movl %esi, c"

                                "movl a, %edi"
                                "subl b, %edi"
                                "movl %edi, c" 

                                "movl a, %eax"
                                "imull b, %eax"
                                "movl %eax, c"

                                "movl a, %eax"
                                "cdq"
                                "idivl b"
                                "movl %eax, c" 

                                "movl c, %edx"
                                "movl c, %eax"
                                "addl $1, %eax"
                                "movl %eax, c"

                                "movl c, %eax"
                                "movl c, %eax"
                                "addl $-1, %eax"
                                "movl %eax, c"

                                "movl a, %eax"
                                "cdq"
                                "idivl b"
                                "movl %edx, c" 

                                "movl a, %eax"
                                "negl %eax"
                                "movl %eax, c"

                                "movl a, %eax"
                                "notl %eax"
                                "movl %eax, c"

                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Fig1_31)
{
    char *input = "./ucl/test_case/test_file/test_fig1_31.c";
    char *output = "./ucl/test_case/test_file/test_fig1_31.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".globl a"
                            "a: .long 10"
                            ".globl b"
                            "b: .long 20"
                            ".comm c, 4"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $24, %esp"
                            ".BB0:"
                                "cmpl $0, a"
                                "jne .BB2"
                            ".BB1:"
                                "movl c, %eax"
                                "movl c, %ecx"
                                "addl $1, %ecx"
                                "movl %ecx, c"
                            ".BB2:"
                                "movl a, %eax"
                                "cmpl b, %eax"
                                "jne .BB4"
                            ".BB3:"
                                "movl c, %eax"
                                "movl c, %ecx"
                                "addl $1, %ecx"
                                "movl %ecx, c"
                            ".BB4:"
                                "movl a, %eax"
                                "cmpl b, %eax"
                                "jle .BB6"
                            ".BB5:"
                                "movl c, %eax"
                                "movl c, %ecx"
                                "addl $1, %ecx"
                                "movl %ecx, c"
                            ".BB6:"
                                "movl $0, %eax"
                                "jmp .BB8"
                            ".BB7:"
                            ".BB8:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig1_32)
{
    char *input = "./ucl/test_case/test_file/test_fig1_32.c";
    char *output = "./ucl/test_case/test_file/test_fig1_32.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".str0: .string \"(signed int)a > (signed int)b \\012\""
                            ".str1: .string \"(unsigned int)a > (unsigned int)b \\012\""
                            ".str2: .string \"(signed int)a > (unsigned int)b \\012\""
                            ".str3: .string \"(unsigned int)a > (signed int)b \\012\""
                            ".globl a"
                            "a: .long -1"
                            ".globl b"
                            "b: .long 0"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $56, %esp"
                            ".BB0:"
                                "movl a, %eax"
                                "cmpl b, %eax"
                                "jle .BB2"
                            ".BB1:"
                                "leal .str0, %eax"
                                "pushl %eax"
                                "call printf"
                                "addl $4, %esp"
                            ".BB2:"
                                "movl a, %eax"
                                "movl b, %ecx"
                                "cmpl %ecx, %eax"
                                "jbe .BB4"
                            ".BB3:"
                                "leal .str1, %eax"
                                "pushl %eax"
                                "call printf"
                                "addl $4, %esp"
                            ".BB4:"
                                "movl a, %eax"
                                "movl b, %ecx"
                                "cmpl %ecx, %eax"
                                "jbe .BB6"
                            ".BB5:"
                                "leal .str2, %eax"
                                "pushl %eax"
                                "call printf"
                                "addl $4, %esp"
                            ".BB6:"
                                "movl a, %eax"
                                "movl b, %ecx"
                                "cmpl %ecx, %eax"
                                "jbe .BB8"
                            ".BB7:"
                                "leal .str3, %eax"
                                "pushl %eax"
                                "call printf"
                                "addl $4, %esp"
                            ".BB8:"
                                "movl $0, %eax"
                                "jmp .BB10"
                            ".BB9:"
                            ".BB10:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Fig1_33)
{
    char *input = "./ucl/test_case/test_file/test_fig1_33.c";
    char *output = "./ucl/test_case/test_file/test_fig1_33.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".str0: .string \"-1 > 0 \\012\""
                            ".align 4"
                            ".globl a"
                            "a: .long -1"
                            ".globl b"
                            "b: .long 0"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB0:"
                                "movl a, %eax"
                                "cmpl b, %eax"
                                "jbe .BB2"
                            ".BB1:"
                                "leal .str0, %eax"
                                "pushl %eax"
                                "call printf"
                                "addl $4, %esp"
                            ".BB2:"
                                "movl $0, %eax"
                                "jmp .BB4"
                            ".BB3:"
                            ".BB4:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Fig1_41)
{
    char *input = "./ucl/test_case/test_file/test_fig1_41.c";
    char *output = "./ucl/test_case/test_file/test_fig1_41.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm ptr, 4"
                            ".comm dt,12"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $76, %esp"
                            ".BB0:"
                                "pushl $64"
                                "pushl $0"
                                "leal -64(%ebp), %eax"
                                "pushl %eax"
                                "call memset"
                                "addl $12, %esp"
                                "movl $2015, -64(%ebp)"
                                "leal -64(%ebp), %eax"
                                "addl $4, %eax"
                                "movl %eax, ptr"
                                "movl ptr, %ecx"
                                "movl $2016, (%ecx)"
                                "movl ptr, %ecx"
                                "movl (%ecx), %edx"
                                "movl %edx, dt+8"                            
                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig1_42)
{
    char *input = "./ucl/test_case/test_file/test_fig1_42.c";
    char *output = "./ucl/test_case/test_file/test_fig1_42.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".globl func"
                            "func: .long f"
                            ".comm dt1, 120"
                            ".comm dt2, 120"
                            ".text"
                            ".globl f"
                            "f:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                            ".BB0:"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                            ".BB2:"
                                "leal dt1, %edi"
                                "leal dt2, %esi"
                                "movl $120, %ecx"
                                "rep movsb"
                                "call *func"
                                "call *func"
                                "call f"
                                "movl $0, %eax"
                                "jmp .BB4"
                            ".BB3:"
                            ".BB4:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig1_43)
{
    char *input = "./ucl/test_case/test_file/test_fig1_43.c";
    char *output = "./ucl/test_case/test_file/test_fig1_43.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".str0:	.string	\"c=%d,d=%c\\012\""
                            ".align 4"
                            ".globl c"
                            "c: .long 3"
                            ".globl d"
                            "d: .byte 113"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB0:"
                                "leal .str0, %eax"
                                "movsbl d, %ecx"
                                "pushl %ecx"
                                "pushl c"
                                "pushl %eax"
                                "call printf"
                                "addl $12, %esp"
                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Enum)
{
    char *input = "./ucl/test_case/test_file/test_enum.c";
    char *output = "./ucl/test_case/test_file/test_enum.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm color, 4"
                            ".text\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig2_27)
{
    char *input = "./ucl/test_case/test_file/test_fig2_27.c";
    char *output = "./ucl/test_case/test_file/test_fig2_27.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".str0:	.string	\"Hello World.\""  
                            ".comm dt, 8"
                            ".comm a, 4"
                            ".comm b, 4"
                            ".comm c, 4"
                            ".comm d, 4"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $20, %esp"
                            ".BB0:"
                                "leal .str0, %eax"
                                "movl %eax, -4(%ebp)"
                                "movl a, %ecx"
                                "addl b, %ecx"
                                "movl %ecx, c"
                                "movl a, %edx"
                                "addl b, %edx"
                                "movl %edx, d"
                                "movl $3, a"
                                "movl a, %ebx"
                                "addl b, %ebx"
                                "movl %ebx, dt+4"
                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig2_36)
{
    char *input = "./ucl/test_case/test_file/test_fig2_36.c";
    char *output = "./ucl/test_case/test_file/test_fig2_36.s";
    ASMFileName = output;
    AstTranslationUnit transUnit;
    extern int ORG;
    ORG = 0;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".globl a"
                            "a: .long 10"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $48, %esp"
                            ".BB0:"
                                "movl $20, -4(%ebp)"
                                "pushl $40"
                                "pushl $0"
                                "leal -44(%ebp), %eax"
                                "pushl %eax"
                                "call memset"
                                "addl $12, %esp"
                                "movl $1, -44(%ebp)"
                                "movl $2, -40(%ebp)"
                                "movl $30, -48(%ebp)"
                                "movl $40, -48(%ebp)"
                                "movl $50, -4(%ebp)"
                                "movl $60, a"
                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig4_9)
{
    char *input = "./ucl/test_case/test_file/test_fig4_9.c";
    char *output = "./ucl/test_case/test_file/test_fig4_9.s";
    ASMFileName = output;
    AstTranslationUnit transUnit;
    extern int ORG;
    ORG = 0;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".str0:	.string	\"654321\""
                            ".str1:	.string	\"fedcba\""
                            ".str2:	.string	\"Hello World.\\012\""
                            ".str3:	.string	\"abcdef\""
                            ".globl buf"
                            "buf: .string \"123456\""
                            ".align 4"
                            ".globl ptr"
                            "ptr:   .long .str0"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $24, %esp"
                            ".BB0:"
                                "leal -8(%ebp), %edi"
                                "leal .str3, %esi"
                                "movl $7, %ecx"
                                "rep movsb"
                                "leal .str1, %eax"
                                "movl %eax, -12(%ebp)"
                                "leal .str2, %ecx"
                                "pushl %ecx"
                                "call printf"
                                "addl $4, %esp"
                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig4_18)
{
    char *input = "./ucl/test_case/test_file/test_fig4_18.c";
    char *output = "./ucl/test_case/test_file/test_fig4_18.s";
    ASMFileName = output;
    AstTranslationUnit transUnit;
    extern int ORG;
    ORG = 0;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".globl s"
                            "s: .word 65535"
                            ".comm b, 4"
                            ".comm c1, 1"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $16, %esp"
                            ".BB0:"
                                "movswl s, %eax"
                                "movl %eax, %eax"
                                "shrl $1, %eax"
                                "movl %eax, %eax"
                                "movl %eax, b"
                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig4_19)
{
    char *input = "./ucl/test_case/test_file/test_fig4_19.c";
    char *output = "./ucl/test_case/test_file/test_fig4_19.s";
    ASMFileName = output;
    AstTranslationUnit transUnit;
    extern int ORG;
    ORG = 0;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".str0: .string \"%d\\012\""
                            ".text"
                            ".globl f"
                            "f:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB2:"
                                "leal .str0, %eax"
                                "pushl $4"
                                "pushl $3"
                                "movl %eax, -4(%ebp)"
                                "call h"
                                "addl $8, %esp"
                                "pushl %eax"
                                "pushl -4(%ebp)"
                                "call printf"
                                "addl $8, %esp"
                                "movl $0, %eax"
                                "jmp .BB4"
                            ".BB3:"
                            ".BB4:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl h"
                            "h:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB5:"
                                "movl 20(%ebp), %eax"
                                "addl 24(%ebp), %eax"
                                "jmp .BB7"
                            ".BB6:"
                            ".BB7:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig4_32)
{
    char *input = "./ucl/test_case/test_file/test_fig4_32.c";
    char *output = "./ucl/test_case/test_file/test_fig4_32.s";
    ASMFileName = output;
    AstTranslationUnit transUnit;
    extern int ORG;
    ORG = 0;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm arr, 48"
                            ".globl ptr"
                            "ptr: .long arr"
                            ".globl ptr1"
                            "ptr1: .long arr"
                            ".globl ptr2"
                            "ptr2: .long ptr1"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                                "movl $1, arr+0"
                                "movl ptr, %eax"
                                "movl $2, (%eax)"
                                "movl ptr2, %eax"
                                "movl (%eax), %ecx"
                                "movl $3, (%ecx)"
                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig5_1)
{
    char *input = "./ucl/test_case/test_file/test_fig5_1.c";
    char *output = "./ucl/test_case/test_file/test_fig5_1.s";
    ASMFileName = output;
    AstTranslationUnit transUnit;
    extern int ORG;
    ORG = 0;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".str0: .string \"f(%d)= %d\\012\""
                            ".text"
                            ".globl f"
                            "f:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB0:"
                                "cmpl $1, 20(%ebp)"
                                "jge .BB3"
                            ".BB1:"
                                "movl $1, %eax"
                                "jmp .BB6"
                            ".BB2:"
                                "jmp .BB5"
                            ".BB3:"
                                "movl 20(%ebp), %eax"
                                "addl $-1, %eax"
                                "pushl %eax"
                                "call f"
                                "addl $4, %esp"
                                "movl 20(%ebp), %ecx"
                                "imull %eax, %ecx"
                                "movl %ecx, %eax"
                                "jmp .BB6"
                            ".BB4:"
                            ".BB5:"
                            ".BB6:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $24, %esp"
                            ".BB7:"
                                "movl $1, -4(%ebp)"
                                "jmp .BB9"
                            ".BB8:"
                                "leal .str0, %eax"
                                "pushl -4(%ebp)"
                                "movl %eax, -8(%ebp)"
                                "call f"
                                "addl $4, %esp"
                                "pushl %eax"
                                "pushl -4(%ebp)"
                                "pushl -8(%ebp)"
                                "call printf"
                                "addl $12, %esp"
                                "movl -4(%ebp), %ecx"
                                "movl -4(%ebp), %edx"
                                "addl $1, %edx"
                                "movl %edx, -4(%ebp)"
                            ".BB9:"
                                "cmpl $10, -4(%ebp)"
                                "jle .BB8"
                            ".BB10:"
                                "movl $0, %eax"
                                "jmp .BB12"
                            ".BB11:"
                            ".BB12:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Fig5_5)
{
    char *input = "./ucl/test_case/test_file/test_fig5_5.c";
    char *output = "./ucl/test_case/test_file/test_fig5_5.s";
    ASMFileName = output;
    AstTranslationUnit transUnit;
    extern int ORG;
    ORG = 0;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm a, 4"
                            ".comm b, 4"
                            ".comm c, 4"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB0:"
                                "movl a, %eax"
                                "addl b, %eax"
                                "cmpl $0, %eax"
                                "je .BB2"
                            ".BB1:"
                                "movl $1, c"
                                "jmp .BB3"
                            ".BB2:"
                                "movl $2, c"
                            ".BB3:"
                                "cmpl $0, a"
                                "je .BB6"
                            ".BB4:"
                                "cmpl $0, b"
                                "je .BB6"
                            ".BB5:"
                                "movl $3, c"
                                "jmp .BB7"
                            ".BB6:"
                                "movl $4, c"
                            ".BB7:"
                                "movl a, %eax"
                                "andl b, %eax"
                                "cmpl $0, %eax"
                                "je .BB9"
                            ".BB8:"
                                "movl $5, c"
                                "jmp .BB10"
                            ".BB9:"
                                "movl $6, c"
                            ".BB10:"
                                "cmpl $0, a"
                                "jne .BB13"
                            ".BB11:"
                                "cmpl $0, b"
                                "jne .BB13"
                            ".BB12:"
                                "movl $0, -12(%ebp)"
                                "jmp .BB14"
                            ".BB13:"
                                "movl $1, -12(%ebp)"
                            ".BB14:"
                                "movl -12(%ebp), %eax"
                                "movl %eax, c"
                                "movl $0, %eax"
                                "jmp .BB16"
                            ".BB15:"
                            ".BB16:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig5_8)
{
    char *input = "./ucl/test_case/test_file/test_fig5_8.c";
    char *output = "./ucl/test_case/test_file/test_fig5_8.s";
    ASMFileName = output;
    AstTranslationUnit transUnit;
    extern int ORG;
    ORG = 0;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm a, 4"
                            ".comm b, 4"
                            ".comm c, 4"
                            ".comm d, 4"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                            ".BB0:"
                                "cmpl $0, a"
                                "je .BB2"
                            ".BB1:"
                                "cmpl $0, b"
                                "jne .BB3"
                            ".BB2:"
                                "cmpl $0, c"
                                "je .BB4"
                            ".BB3:"
                                "movl $1, d"
                                "jmp .BB5"
                            ".BB4:"
                                "movl $2, d"
                            ".BB5:"
                                "movl $0, %eax"
                                "jmp .BB7"
                            ".BB6:"
                            ".BB7:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig5_12)
{
    char *input = "./ucl/test_case/test_file/test_fig5_12.c";
    char *output = "./ucl/test_case/test_file/test_fig5_12.s";
    ASMFileName = output;
    AstTranslationUnit transUnit;
    extern int ORG;
    ORG = 0;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm dt, 24"
                            ".comm arr, 16"
                            ".comm arr2, 60"
                            ".comm a, 4"
                            ".comm b, 4"
                            ".comm c, 4"
                            ".comm i, 4"
                            ".comm ptr, 4"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $80, %esp"
                            ".BB0:"
                                "leal -24(%ebp), %edi"
                                "leal dt, %esi"
                                "movl $24, %ecx"
                                "rep movsb"
                                "pushl $24"
                                "pushl $0"
                                "leal -48(%ebp), %eax"
                                "pushl %eax"
                                "call memset"
                                "addl $12, %esp"
                                "movl $1, -48(%ebp)"
                                "movl $2, -44(%ebp)"
                                "movl $3, -40(%ebp)"
                                "movl a, %eax"
                                "addl b, %eax"
                                "movl %eax, c"
                                "leal a, %ecx"
                                "movl %ecx, ptr"
                                "movl dt+0, %edx"
                                "addl dt+4, %edx"
                                "movl %edx, c"
                                "movl arr+0, %ebx"
                                "addl arr+4, %ebx"
                                "movl %ebx, c"
                                "movl i, %esi"
                                "imull $20, %esi"
                                "leal arr2, %edi"
                                "addl $8, %esi"
                                "addl %esi, %edi"
                                "movl $30, (%edi)"
                                "movl $50, dt+20"
                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig5_13)
{
    char *input = "./ucl/test_case/test_file/test_fig5_13.c";
    char *output = "./ucl/test_case/test_file/test_fig5_13.s";
    ASMFileName = output;
    AstTranslationUnit transUnit;
    extern int ORG;
    ORG = 0;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm arr, 16"
                            ".comm i, 4"
                            ".comm dt, 20"
                            ".text"
                            ".globl main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $24, %esp"
                            ".BB0:"
                                "movl i, %eax"
                                "imull $4, %eax"
                                "leal arr, %ecx"
                                "addl %eax, %ecx"
                                "movl $30, (%ecx)"
                                "movl $50, arr+12"
                                "movl i, %edx"
                                "imull $4, %edx"
                                "leal dt+4, %ebx"
                                "addl %edx, %ebx"
                                "movl $60, (%ebx)"
                                "movl $80, dt+12"
                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Fig5_25)
{
    char *input = "./ucl/test_case/test_file/test_fig5_25.c";
    char *output = "./ucl/test_case/test_file/test_fig5_25.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm a, 4"
                            ".comm b, 4"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                                "cmpl $1, a"
                                "jl .BB12"
                            ".BB1:"
                                "cmpl $5, a"
                                "jg .BB12"
                            ".BB2:"
                                "movl a, %eax"
                                "subl $1, %eax"
                            ".data"
                            "swtchTable1: .long .BB4"
                                        ".long .BB8"
                                        ".long .BB6"
                                        ".long .BB12"
                                        ".long .BB10"
                            ".text"
                                "jmp *swtchTable1(,%eax,4)"
                            ".BB3:"
                            ".BB4:"
                                "movl $10, b"
                                "movl $5, a"
                                "jmp .BB12"
                            ".BB5:"
                            ".BB6:"
                                "movl $30, b"
                                "jmp .BB12"
                            ".BB7:"
                            ".BB8:"
                                "movl $20, b"
                                "jmp .BB12"
                            ".BB9:"
                            ".BB10:"
                                "movl $50, b"
                                "jmp .BB12"
                            ".BB11:"
                            ".BB12:"
                                "movl $60, b"
                                "movl $0, %eax"
                                "jmp .BB14"
                            ".BB13:"
                            ".BB14:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig5_26)
{
    char *input = "./ucl/test_case/test_file/test_fig5_26.c";
    char *output = "./ucl/test_case/test_file/test_fig5_26.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".str0: .string \"main()\\012\""
                            ".comm a, 4"
                            ".comm b, 4"
                            ".text"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB0:"
                                "cmpl $50, a"
                                "jl .BB4"
                            ".BB1:"
                                "cmpl $50, a"
                                "jg .BB8"
                            ".BB2:"
                                "jmp .BB17"
                            ".BB3:"
                            ".BB4:"
                                "cmpl $1, a"
                                "jl .BB19"
                            ".BB5:"
                                "cmpl $2, a"
                                "jg .BB19"
                            ".BB6:"
                                "movl a, %eax"
                                "subl $1, %eax"
                            ".data"
                            "swtchTable1: .long .BB11"
                                        ".long .BB13"
                            ".text"
                                "jmp *swtchTable1(,%eax,4)"
                            ".BB7:"
                            ".BB8:"
                                "cmpl $20000, a"
                                "jne .BB19"
                            ".BB9:"
                                "jmp .BB15"
                            ".BB10:"
                            ".BB11:"
                                "movl $10, b"
                                "jmp .BB19"
                            ".BB12:"
                            ".BB13:"
                                "movl $20, b"
                                "jmp .BB19"
                            ".BB14:"
                            ".BB15:"
                                "movl $20000, b"
                                "jmp .BB19"
                            ".BB16:"
                            ".BB17:"
                                "movl $50, b"
                                "jmp .BB19"
                            ".BB18:"
                            ".BB19:"
                                "movl $60, b"
                                "leal .str0, %eax"
                                "pushl %eax"
                                "call printf"
                                "addl $4, %esp"
                                "movl $0, %eax"
                                "jmp .BB21"
                            ".BB20:"
                            ".BB21:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}


TEST_F(TestUcl, Test_Fig5_30)
{
    char *input = "./ucl/test_case/test_file/test_fig5_30.c";
    char *output = "./ucl/test_case/test_file/test_fig5_30.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm a, 4"
                            ".comm b, 4"
                            ".text"
                            ".globl GetData"
                            "GetData:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $16, %esp"
                            ".BB0:"
                                "movl 20(%ebp), %eax"
                                "leal (%eax), %edi"
                                "leal -16(%ebp), %esi"
                                "movl $16, %ecx"
                                "rep movsb"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl f"
                            "f:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                            ".BB3:"
                                "movl $2015, %eax"
                                "jmp .BB5"
                            ".BB4:"
                            ".BB5:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"             
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $32, %esp"
                            ".BB6:"
                                "leal -16(%ebp), %eax"
                                "pushl %eax"
                                "call GetData"
                                "addl $4, %esp"
                                "movl a, %eax"
                                "orl b, %eax"
                                "movl a, %ecx"
                                "notl %ecx"
                                "leal a, %edx"
                                "call f"
                                "movl $0, %eax"
                                "jmp .BB8"
                            ".BB7:"
                            ".BB8:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig5_33)
{
    char *input = "./ucl/test_case/test_file/test_fig5_33.c";
    char *output = "./ucl/test_case/test_file/test_fig5_33.s";
    ASMFileName = output;
    
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm a, 4"
                            ".comm b, 4"
                            ".text"        
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB0:"
                                "cmpl $1, a"
                                "jl .BB8"
                            ".BB1:"
                                "cmpl $3, a"
                                "jg .BB8"
                            ".BB2:"
                                "movl a, %eax"
                                "subl $1, %eax"
                            ".data"
                                "swtchTable1:   .long .BB4"
                                            ".long .BB5"
                                            ".long .BB6"
                            ".text"
                                "jmp *swtchTable1(,%eax,4)"
                            ".BB3:"
                            ".BB4:"
                            ".BB5:"
                            ".BB6:"
                                "movl $300, b"
                                "jmp .BB8"
                            ".BB7:"
                            ".BB8:"
                                "movl $500, b"
                                "movl $0, %eax"
                                "jmp .BB10"
                            ".BB9:"
                            ".BB10:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig6_1)
{
    char *input = "./ucl/test_case/test_file/test_fig6_1.c";
    char *output = "./ucl/test_case/test_file/test_fig6_1.s";
    ASMFileName = output;
    extern int ORG;
    ORG = 0;
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".str0: .string \"b = %d \\012\""
                            ".align 4"
                            ".globl a"
                            "a: .long 10"
                            ".text"        
                            ".globl	f"
                            "f:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $16, %esp"
                            ".BB0:"
                                "movl $1, -4(%ebp)"
                                "leal .str0, %eax"
                                "pushl -4(%ebp)"
                                "pushl %eax"
                                "call printf"
                                "addl $8, %esp"
                                "movl 20(%ebp), %ecx"
                                "addl $2, %ecx"
                                "movl %ecx, %eax"
                                "jmp .BB2"
                            ".BB1:"
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $4, %esp"
                            ".BB3:"
                                "pushl $30"
                                "call f"
                                "addl $4, %esp"
                                "movl %eax, a"
                                "movl $0, %eax"
                                "jmp .BB5"
                            ".BB4:"
                            ".BB5:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig6_5)
{
    char *input = "./ucl/test_case/test_file/test_fig6_5.c";
    char *output = "./ucl/test_case/test_file/test_fig6_5.s";
    ASMFileName = output;
    extern int ORG;
    ORG = 0;
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm a, 4"
                            ".comm b, 4"
                            ".comm c, 4"
                            ".comm d, 4"
                            ".comm s1, 4"
                            ".comm s2, 4"
                            ".comm s3, 4"
                            ".text"        
                            ".globl	f"
                            "f:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $28, %esp"
                            ".BB0:"
                                "movl a, %eax"
                                "addl b, %eax"
                                "movl %eax, s1"
                                "movl c, %ecx"
                                "addl d, %ecx"
                                "movl %ecx, s2"
                                "movl a, %edx"
                                "addl b, %edx"
                                "movl c, %ebx"
                                "addl d, %ebx"
                                "addl %ebx, %edx"
                                "movl %edx, s3"
                                "movl a, %esi"
                                "addl b, %esi"
                                "movl %esi, s1"
                                "movl c, %edi"
                                "addl d, %edi"
                                "movl %edi, s2"
                            ".BB1:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret"
                            ".globl	g"
                            "g:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $20, %esp"
                            ".BB2:"
                                "movl a, %eax"
                                "addl b, %eax"
                                "movl %eax, s1"
                                "movl c, %ecx"
                                "addl d, %ecx"
                                "movl %ecx, s2"
                                "movl a, %edx"
                                "addl b, %edx"
                                "movl c, %ebx"
                                "addl d, %ebx"
                                "addl %ebx, %edx"
                                "movl %edx, s3"
                            ".BB3:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig6_19)
{
    char *input = "./ucl/test_case/test_file/test_fig6_19.c";
    char *output = "./ucl/test_case/test_file/test_fig6_19.s";
    ASMFileName = output;
    extern int ORG;
    ORG = 0;
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm i1, 1"
                            ".comm u1, 1"
                            ".comm i2, 2"
                            ".comm u2, 2"
                            ".comm i4, 4"
                            ".comm u4, 4"
                            ".text"        
                            ".globl	main"
                            "main:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $12, %esp"
                            ".BB0:"
                                "movsbl i1, %eax"
                                "movl %eax, i4"
                                "movl i4, %ecx"
                                "movb %cl, -8(%ebp)"
                                "movb -8(%ebp), %cl"
                                "movb %cl, i1"
                                "movl i4, %ecx"
                                "movw %cx, -12(%ebp)"
                                "movw -12(%ebp), %cx"
                                "movw %cx, i2"
                                "movl $0, %eax"
                                "jmp .BB2"
                            ".BB1:"                 
                            ".BB2:"
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

TEST_F(TestUcl, Test_Fig6_21)
{
    char *input = "./ucl/test_case/test_file/test_fig6_21.c";
    char *output = "./ucl/test_case/test_file/test_fig6_21.s";
    ASMFileName = output;
    extern int ORG;
    ORG = 0;
    AstTranslationUnit transUnit;
    Initialize();

	transUnit = ParseTranslationUnit(input);
	CheckTranslationUnit(transUnit);
	Translate(transUnit);

    EmitTranslationUnit(transUnit);
    Finalize();

    std::string asmcode = "# Code auto-generated by UCC"
                            ".data"
                            ".comm num1, 4"
                            ".comm num2, 4"
                            ".comm ptr1, 4"
                            ".comm ptr2, 4"
                            ".text"        
                            ".globl	f"
                            "f:"
                                "pushl %ebp"
                                "pushl %ebx"
                                "pushl %esi"
                                "pushl %edi"
                                "movl %esp, %ebp"
                                "subl $28, %esp"
                            ".BB0:"
                                "pushl $16"
                                "pushl $0"
                                "leal -16(%ebp), %eax"
                                "pushl %eax"
                                "call memset"
                                "addl $12, %esp"
                                "movl $10, -16(%ebp)"
                                "leal num1, %eax"
                                "movl %eax, ptr1"
                                "leal num2, %ecx"
                                "movl %ecx, ptr2"
                                "movl ptr2, %edx"
                                "movl (%edx), %ebx"
                                "movl ptr1, %edx"
                                "movl %ebx, (%edx)"
                            ".BB1:"                 
                                "movl %ebp, %esp"
                                "popl %edi"
                                "popl %esi"
                                "popl %ebx"
                                "popl %ebp"
                                "ret\xff";
    std::string testcode;

    std::ifstream asmFile(output, std::ifstream::in);
    if (!asmFile.is_open()) {
        std::cout << "open:" << output << "failed\n";
    }
    char ch = asmFile.get();
    testcode.push_back(ch);
    while (asmFile.good()) {
        ch = asmFile.get();
        testcode.push_back(ch);
    }
    EXPECT_EQ(get_string(asmcode), get_string(testcode));
    asmFile.close();
}

